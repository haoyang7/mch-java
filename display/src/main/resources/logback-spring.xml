<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 {blue}表示前面的输出日志的颜色是蓝色 -->
    <property name="CONSOLE_LOG_PATTERN"
              value=" ${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){blue} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 获取yml中的log地址 -->
    <springProperty scope="context" name="logPath" source="log.path"/>

    <!-- 控制台彩色日志输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!--由文件大小与时间控制滚动-->
<!--    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--            &lt;!&ndash;日志文件输出的文件名&ndash;&gt;-->
<!--            <FileNamePattern>${logPath}/%d{yyyy-MM-dd}/logs-%d{yyyy-MM-dd}-%i.log</FileNamePattern>-->
<!--            &lt;!&ndash;活动文件大小&ndash;&gt;-->
<!--            <maxFileSize>20MB</maxFileSize>-->
<!--            &lt;!&ndash;回滚的总文件大小 eg:totalSizeCap/MaxFileSize 即只保存2个文件&ndash;&gt;-->
<!--            <totalSizeCap>2GB</totalSizeCap>-->
<!--            <cleanHistoryOnStart>true</cleanHistoryOnStart>-->
<!--            &lt;!&ndash;最大的日志保存数量&ndash;&gt;-->
<!--            &lt;!&ndash;<param name="MaxBackupIndex" value="10"/>&ndash;&gt;-->
<!--            &lt;!&ndash;日志文件保留天数&ndash;&gt;-->
<!--            <MaxHistory>30</MaxHistory>-->
<!--        </rollingPolicy>-->
<!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
<!--            &lt;!&ndash;格式化输出：%d表示日期。%-5level：日志级别，从左显示5个字符宽度。%thread表示线程名，%c:表示日志所在类。%L：表示日志所在行数。 %msg：日志消息，%n是换行符&ndash;&gt;-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%level] [%thread] [%c] %L - %msg%n</pattern>-->
<!--            <charset>utf8</charset>-->
<!--        </encoder>-->
<!--    </appender>-->

    <!--异常日志-->
<!--    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>ERROR</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--        &lt;!&ndash;由文件大小与时间控制滚动&ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--            <FileNamePattern>${logPath}/%d{yyyy-MM-dd}/errors-%d{yyyy-MM-dd}-%i.log</FileNamePattern>-->
<!--            <maxFileSize>5MB</maxFileSize>-->
<!--            &lt;!&ndash;回滚的总文件大小 eg:totalSizeCap/MaxFileSize 即只保存2个文件&ndash;&gt;-->
<!--            <totalSizeCap>1GB</totalSizeCap>-->
<!--            <cleanHistoryOnStart>true</cleanHistoryOnStart>-->
<!--            &lt;!&ndash;最大的日志保存数量&ndash;&gt;-->
<!--            &lt;!&ndash;<param name="MaxBackupIndex" value="10"/>&ndash;&gt;-->
<!--            &lt;!&ndash;日志文件保留天数&ndash;&gt;-->
<!--            <MaxHistory>30</MaxHistory>-->
<!--        </rollingPolicy>-->
<!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%level] [%thread] [%c] %L - %msg%n</pattern>-->
<!--            <charset>utf8</charset>-->
<!--        </encoder>-->
<!--    </appender>-->

    <!--
    logger 有两种级别，一种是 root，一种是普通的 logger，logger 是用来设置某一个包或者具体的某一个类的日志打印机级别，以及制定的 appender。
    logger 有三个属性
    - name：用来指定此 logger 约束的某一个包或者具体的某一个类
    - level：用来设置打印机别，
    - addtivity：是否向上级 logger 传递打印信息。默认是 true
    每个 logger 都有对应的父级关系，它通过包名来决定父级关系，root 是最高级的父元素。
    -->
    <logger name="com.chaohong" level="INFO"/>
    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
<!--        <appender-ref ref="FILE"/>-->
<!--        <appender-ref ref="ERROR"/>-->
    </root>
</configuration>
